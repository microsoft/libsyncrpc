/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * A synchronous RPC channel that allows JavaScript to synchronously call out
 * to a child process and get a response over a line-based protocol,
 * including handling of JavaScript-side callbacks before the call completes.
 *
 * For details on the protocol, see the `README.md`.
 */
export declare class SyncRpcChannel {
  constructor(exe: string, args: Array<string>)
  requestBinarySync(method: string, payload: string): Buffer
  /**
   * Send a request to the child process and wait for a response. The method
   * will not return, synchronously, until a response is received or an error
   * occurs.
   *
   * For details on the protocol, refer to `README.md`.
   */
  requestSync(method: string, payload: string): string
  /**
   * Registers a JavaScript callback that the child can invoke before
   * completing a request. The callback will receive a JSON-encoded string as
   * its argument and should return a JSON-encoded string as its result.
   *
   * If the callback throws, an it will be handled appropriately by
   * `requestSync` and the child will be notified.
   */
  registerCallback(name: string, cb: (arg0: string, arg1: string) => arg: string): void
  /**
   * Does what it says on the tin. But you wouldn't do this to a _child_,
   * would you? Just what kind of person are you?
   */
  murderInColdBlood(): void
}
