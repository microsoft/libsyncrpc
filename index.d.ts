/* auto-generated by NAPI-RS */
/* eslint-disable */
/**
 * A synchronous RPC channel that allows JavaScript to synchronously call out
 * to a child process and get a response over a line-based protocol,
 * including handling of JavaScript-side callbacks before the call completes.
 *
 * #### Protocol
 *
 * Requests follow a MessagePack-based "tuple"/array protocol with 3 items:
 * `(<type>, <name>, <payload>)`. All items are binary arrays of 8-bit
 * integers, including the `<type>` and `<name>`, to avoid unnecessary
 * encoding/decoding at the protocol level.
 *
 * For specific message types and their corresponding protocol behavior, please
 * see `MessageType` below.
 */
export declare class SyncRpcChannel {
  /**
   * Constructs a new `SyncRpcChannel` by spawning a child process with the
   * given `exe` executable, and a given set of `args`.
   */
  constructor(exe: string, args: Array<string>)
  /**
   * Send a request to the child process and wait for a response. The method
   * will not return, synchronously, until a response is received or an error
   * occurs.
   *
   * This method will take care of encoding and decoding the binary payload to
   * and from a JS string automatically and suitable for smaller payloads.
   */
  requestSync(method: string, payload: string): string
  /**
   * Send a request to the child process and wait for a response. The method
   * will not return, synchronously, until a response is received or an error
   * occurs.
   *
   * Unlike `requestSync`, this method will not do any of its own encoding or
   * decoding of payload data. Everything will be as sent/received through the
   * underlying protocol.
   */
  requestBinarySync(method: string, payload: Uint8Array): Uint8Array
  /**
   * Registers a JavaScript callback that the child can invoke before
   * completing a request. The callback will receive a string name and a string
   * payload as its arguments and should return a string as its result.
   *
   * There is currently no `Uint8Array`-only equivalent to this functionality.
   *
   * If the callback throws, an it will be handled appropriately by
   * `requestSync` and the child will be notified.
   */
  registerCallback(name: string, callback: (name: string, payload: string) => string): void
  close(): void
}

/**
 * Messages types exchanged between the channel and its child. All messages
 * have an associated `<name>` and `<payload>`, which will both be arrays of
 * 8-bit integers (`Uint8Array`s).
 */
export declare const enum MessageType {
  /**
   * A request to the child with the given raw byte `<payload>`, with
   * `<name>` as the method name. The child may send back any number of
   * `MessageType.Call` messages and must then close the request with either a
   * `MessageType.Response`, or a `MessageType.Error`.  message.
   */
  Request = 1,
  /**
   * A response to a `MessageType.Call` message that the child previously sent.
   * The `<payload>` is the return value from invoking the JavaScript callback
   * associated with it. If the callback errors, `MessageType.CallError` will
   * be sent to the child.
   */
  CallResponse = 2,
  /**
   * Informs the child that an error occurred. The `<payload>` will be the
   * binary representation of the stringified error, as UTF-8 bytes, not
   * necessarily in JSON format. The method linked to this message will also
   * throw an error after sending this message to its child and terminate the
   * request call.
   */
  CallError = 3,
  /**
   * A response to a request that the call was for. `<name>` MUST match the
   * `MessageType.Request` message's `<name>` argument.
   */
  Response = 4,
  /**
   * A response that denotes some error occurred while processing the request
   * on the child side. The `<payload>` will simply be the binary
   * representation of the stringified error, as UTF-8 bytes, not necessarily
   * in JSON format. The method associated with this call will also throw an
   * error after receiving this message from the child.
   */
  Error = 5,
  /**
   * A request to invoke a pre-registered JavaScript callback (see
   * `SyncRpcChannel#registerCallback`). `<name>` is the name of the callback,
   * and `<payload>` is an encoded UTF-8 string that the callback will be
   * called with. The child should then listen for `MessageType.CallResponse`
   * and `MessageType.CallError` messages.
   */
  Call = 6,
  _UnusedPlaceholderVariant = 7
}
